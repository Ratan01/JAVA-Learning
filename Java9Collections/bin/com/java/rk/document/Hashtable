Hashtable (legacy, synchronized):
---------------------------------
- A Hashtable in Java is part of the java.util package and implements the Map interface. 
- It is one of the oldest implementations of a key-value pair storage in Java and provides synchronized operations, 
  making it thread-safe for concurrent access. 
- However, due to synchronization overhead, it is less efficient than alternatives like HashMap in single-threaded 
  environments.
  
Key Features of Hashtable:
--------------------------
- Thread-Safe: Synchronizes all methods, making it safe for concurrent use by multiple threads.
- No Null Keys or Values: Does not allow null keys or null values.
- Key-Value Pairs: Stores data in the form of key-value pairs, with each key being unique.
- No Guaranteed Order: Does not maintain any specific order for keys or entries.
- Performance: Slower compared to HashMap because of its synchronized methods.

Commonly Used Methods:
----------------------
Adding and Updating Entries:
- put(K key, V value): Associates the specified value with the specified key. If the key already exists, it updates 
  the value.
- putIfAbsent(K key, V value): Adds the key-value pair only if the key is not already present.

Accessing Entries:
- get(Object key): Retrieves the value associated with the specified key.
- getOrDefault(Object key, V defaultValue): Returns the value associated with the key or a default value if the key is
  not found.
  
Removing Entries:
- remove(Object key): Removes the mapping for the specified key.
- remove(Object key, Object value): Removes the entry only if the key maps to the specified value.

Checking Existence:
- containsKey(Object key): Checks if the map contains the specified key.
- contains(Object value): Checks if the map contains the specified value (deprecated; use containsValue() instead).
- containsValue(Object value): Checks if the map contains the specified value.

Other Methods:
- size(): Returns the number of key-value pairs.
- isEmpty(): Checks if the map is empty.
- clear(): Removes all entries from the map.
- keySet(): Returns a set of all keys in the map.
- values(): Returns a collection of all values in the map.
- entrySet(): Returns a set of key-value pairs as Map.Entry objects.

When to Use Hashtable:
- Legacy Code: When maintaining old systems that use Hashtable.
- Simple Thread Safety: When thread-safe key-value storage is required without using modern alternatives like 
  ConcurrentHashMap.
- Non-Null Constraints: When neither keys nor values can be null.
- For most new projects, HashMap or ConcurrentHashMap is preferred over Hashtable due to better performance and 
  flexibility.
=====================================================================================================================
import java.util.Hashtable;

public class HashtableExample {
    public static void main(String[] args) {
        // Creating a Hashtable
        Hashtable<String, Integer> table = new Hashtable<>();

        // Adding key-value pairs
        table.put("Alice", 30);
        table.put("Bob", 25);
        table.put("Charlie", 35);

        // Accessing values
        System.out.println("Value for Alice: " + table.get("Alice"));

        // Checking key and value existence
        System.out.println("Contains key 'Bob': " + table.containsKey("Bob"));
        System.out.println("Contains value 35: " + table.containsValue(35));

        // Removing an entry
        table.remove("Bob");
        System.out.println("After removal: " + table);

        // Iterating through the Hashtable
        System.out.println("Entries in the Hashtable:");
        for (String key : table.keySet()) {
            System.out.println(key + ": " + table.get(key));
        }
    }
}
===========================================================================================================


