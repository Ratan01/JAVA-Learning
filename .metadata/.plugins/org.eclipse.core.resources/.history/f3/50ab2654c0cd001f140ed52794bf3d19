TreeSet (sorted set, uses Red-Black Tree):
------------------------------------------
- A TreeSet in Java is a part of the java.util package and implements the NavigableSet interface, which extends 
  the Set interface. 
- It is backed by a TreeMap and stores elements in a sorted order. 
- The sorting can be either the natural order of the elements or a custom order defined by a Comparator.

Key Features of TreeSet:
------------------------
- Unique Elements: Like all sets, it does not allow duplicate elements.
- Sorted Order: Maintains elements in ascending (natural) order by default. A custom sorting order can be 
  defined using a Comparator.
- No Null Elements: TreeSet does not allow null elements. Attempting to add a null value results in a NullPointerException.
- Efficient Operations: Provides O(log n) time complexity for basic operations like add, remove, and contains.
- NavigableSet Features: Offers methods to navigate through elements (e.g., lower, higher, floor, ceiling).

Commonly Used Methods:
----------------------
Adding Elements:
- add(E e): Adds an element to the set.

Removing Elements:
- remove(Object o): Removes the specified element if it exists.
- clear(): Removes all elements from the set.

Checking Elements:
- contains(Object o): Checks if the set contains a specific element.
- isEmpty(): Checks if the set is empty.

Size:
- size(): Returns the number of elements in the set.

Navigating Elements:
- first(): Returns the first (lowest) element.
- last(): Returns the last (highest) element.
- higher(E e): Returns the least element strictly greater than the given element.
- lower(E e): Returns the greatest element strictly less than the given element.
- ceiling(E e): Returns the least element greater than or equal to the given element.
- floor(E e): Returns the greatest element less than or equal to the given element.