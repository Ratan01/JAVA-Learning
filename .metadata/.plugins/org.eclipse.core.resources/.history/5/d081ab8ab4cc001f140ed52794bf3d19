Stack:
------
- A Stack in Java is a Last-In-First-Out (LIFO) data structure that is part of the java.util package. 
- It extends Vector, meaning it inherits methods and properties from the Vector class. Stacks are useful when you 
  need to manage elements in a LIFO order, such as in undo operations, parsing expressions, or implementing recursive 
  algorithms.
  
Key Features of Stack:
---------------------
- LIFO Behavior: The last element added (pushed) to the stack is the first one to be removed (popped).
- Based on Vector: It is a subclass of Vector, so it also includes methods from the Vector class.
- Synchronized: Like Vector, Stack is synchronized, making it thread-safe.
- Legacy Class: Stack is considered a legacy class. For modern usage, consider using Deque or ArrayDeque for 
  stack-like behavior.
  
Commonly Used Methods:
--------------------- 
Pushing (Adding) Elements:
- push(E item): Adds an element to the top of the stack.

Popping (Removing) Elements:
- pop(): Removes and returns the element at the top of the stack. Throws an EmptyStackException if the stack is empty.

Peeking at the Top Element:
- peek(): Returns the element at the top of the stack without removing it. Throws an EmptyStackException if the 
  stack is empty.
  
Checking if Empty:
- empty(): Returns true if the stack is empty, otherwise false.

Searching for an Element:
- search(Object o): Returns the 1-based position of an element in the stack. If the element is not found, it returns -1.

===================================================================================================================
import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        // Creating a Stack
        Stack<String> stack = new Stack<>();

        // Pushing elements onto the stack
        stack.push("Java");
        stack.push("Python");
        stack.push("C++");

        // Displaying the stack
        System.out.println("Stack: " + stack);

        // Peeking at the top element
        System.out.println("Top element: " + stack.peek());

        // Popping elements from the stack
        System.out.println("Popped element: " + stack.pop());
        System.out.println("Stack after pop: " + stack);

        // Searching for an element
        System.out.println("Position of 'Java': " + stack.search("Java"));

        // Checking if the stack is empty
        System.out.println("Is stack empty? " + stack.empty());
    }
}
================================================================================================================

