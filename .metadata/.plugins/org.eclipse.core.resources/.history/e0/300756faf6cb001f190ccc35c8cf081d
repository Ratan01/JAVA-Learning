Vector:
-------
- A Vector in Java is a dynamic array-like data structure provided by the java.util package. 
- It is similar to an ArrayList, but the main difference is that Vector is synchronized, making it thread-safe 
  for concurrent operations. 
- However, because of this synchronization, it is generally less efficient than ArrayList for single-threaded scenarios.

Key Features of Vector:
----------------------
- Resizable Array: Like ArrayList, Vector dynamically resizes itself when elements are added or removed.
- Thread-Safe: All methods in Vector are synchronized, making it safe for use in multi-threaded environments.
- Random Access: Elements can be accessed by index, just like in an array.
- Allows Duplicates and Nulls: Vector permits duplicate elements and allows null values.
- Legacy Class: Although still widely used, Vector is considered a legacy class and is often replaced by ArrayList 
  in modern code.
  
Commonly Used Methods:
----------------------
Adding Elements:
- add(E e): Adds an element to the end of the vector.
- add(int index, E element): Inserts an element at a specific position.
- addAll(Collection<? extends E> c): Appends all elements from a collection.

Accessing Elements:
- get(int index): Returns the element at the specified index.
- firstElement(): Returns the first element.
- lastElement(): Returns the last element.

Updating Elements:
- set(int index, E element): Replaces the element at the specified index.

Removing Elements:
- remove(int index): Removes the element at the specified index.
- remove(Object o): Removes the first occurrence of the specified element.
- removeAll(Collection<?> c): Removes all elements contained in a specified collection.

Capacity Management:
- capacity(): Returns the current capacity of the vector.
ensureCapacity(int minCapacity): Increases the capacity if necessary.
trimToSize(): Reduces the capacity to match the current size.
Size and Emptiness:

size(): Returns the number of elements.
isEmpty(): Checks if the vector is empty.
Searching:

indexOf(Object o): Returns the index of the first occurrence of the element.
contains(Object o): Checks if the vector contains a specific element.