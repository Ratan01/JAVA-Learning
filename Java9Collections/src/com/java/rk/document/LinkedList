LinkedList:
-----------
- A LinkedList in Java is a linear data structure that is part of the java.util package. 
- Unlike an ArrayList, a LinkedList is implemented as a doubly-linked list, meaning each element (node) has 
  pointers to both its previous and next elements. 
- This makes it particularly suitable for operations that frequently add or remove elements in the middle of the list.

Key Features of LinkedList:
---------------------------
- Doubly Linked: Each node points to both its predecessor and successor.
- Efficient Insertions and Deletions: Operations like adding or removing elements from the middle or ends of the list 
  are efficient because no shifting of elements is required (unlike an ArrayList).
- Implements Multiple Interfaces: LinkedList implements List, Deque, and Queue interfaces, meaning it can function as a:
  List (e.g., ordered collection)
  Queue (e.g., FIFO)
  Deque (e.g., double-ended queue)
- Allows Duplicates and Null Values: You can store duplicate elements and null values

Commonly Used Methods:
---------------------
Adding Elements:
- add(E e): Adds an element to the end of the list.
- add(int index, E element): Inserts an element at a specified position.
- addFirst(E e): Adds an element at the beginning.
- addLast(E e): Adds an element at the end (same as add(E e)).

Accessing Elements:
- get(int index): Retrieves the element at the specified index.
- getFirst(): Retrieves the first element.
- getLast(): Retrieves the last element.

Updating Elements:
- set(int index, E element): Replaces the element at the specified index.

Removing Elements:
- remove(int index): Removes the element at the specified index.
- remove(Object o): Removes the first occurrence of the specified element.
- removeFirst(): Removes the first element.
- removeLast(): Removes the last element.

Size and Emptiness:
- size(): Returns the number of elements.
- isEmpty(): Checks if the list is empty.

Searching:
- indexOf(Object o): Returns the index of the first occurrence of the element.
- contains(Object o): Checks if the list contains a specific element.

Deque/Queue Operations:
- offer(E e): Inserts the element at the end.
- poll(): Retrieves and removes the first element.
- peek(): Retrieves the first element without removing it.

=======================================================================================================
import java.util.LinkedList;

public class LinkedListExample {
    public static void main(String[] args) {
        // Creating a LinkedList
        LinkedList<String> cities = new LinkedList<>();

        // Adding elements
        cities.add("New York");
        cities.add("Los Angeles");
        cities.add("Chicago");

        // Adding elements at specific positions
        cities.addFirst("San Francisco");
        cities.addLast("Houston");

        // Accessing elements
        System.out.println("First city: " + cities.getFirst());
        System.out.println("Last city: " + cities.getLast());

        // Updating elements
        cities.set(1, "Seattle");
        System.out.println("Updated list: " + cities);

        // Removing elements
        cities.remove("Houston");
        cities.removeFirst();
        System.out.println("After removal: " + cities);

        // Checking size
        System.out.println("Size: " + cities.size());
    }
}
========================================================================================================
