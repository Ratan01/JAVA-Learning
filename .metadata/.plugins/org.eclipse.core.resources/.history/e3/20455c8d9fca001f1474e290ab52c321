Polymorphism:
------------
- Polymorphism in Java is one of the core principles of object-oriented programming (OOP). 
- The term "polymorphism" means "many forms," and in Java, it allows objects to take on multiple 
  forms depending on the context.
- Polymorphism enables a single interface or method to behave differently based on the object 
  it acts upon. This is achieved through method overriding, method overloading, and the use of parent 
  classes or interfaces.
  
Types of Polymorphism in Java:
------------------------------
Compile-Time Polymorphism (Static Polymorphism):
- Achieved through method overloading.
- The method to be called is determined at compile time.
- Example: Overloaded methods with change in signatures.

Change in Signature Means:
• Either there has to be change in no.of parameters.
• Or there has to be change in type of parameters.
• Or there has to be change in the Sequence of parameters.

Run-Time Polymorphism (Dynamic Polymorphism):
- Achieved through method overriding.
- The method to be executed is determined at runtime based on the object.
- Example: Overriding a parent class method in the child class.

===========================================================================
Can we overload java main() method?
Yes, by method overloading. You can have any number of main methods in a class by method overloading. 
But JVM calls main() method which receives string array as arguments only.

public class Test {
   public static void main(String[] args) {
        System.out.println("main with String[]");
   }
   public static void main(String args){
        System.out.println("main with String");
   }
   public static void main(){
        System.out.println("main without args");
   }
}
============================================================================