LinkedList (can also act as a queue):
-------------------------------------
- In Java, a LinkedList is a part of the java.util package and implements both the List and Deque interfaces. 
- This dual implementation allows it to act as both a queue and a stack, in addition to being a regular list. 
- Internally, it is a doubly-linked list, making it efficient for insertions and deletions.

Key Features of LinkedList as a Queue:
--------------------------------------
- FIFO (First-In-First-Out): When used as a queue, LinkedList follows the FIFO principle.
- Deque Support: It allows adding and removing elements from both ends when used as a deque.
- Dynamic Size: Automatically resizes without a fixed size constraint.
- Allows Null Values: Permits null elements.
- Performance: Efficient for frequent insertions and deletions, but slower for random access compared to ArrayList.

Commonly Used Methods:
---------------------
Adding Elements:
- add(E e) or addLast(E e): Adds an element to the end of the queue.
- offer(E e) or offerLast(E e): Adds an element to the end of the queue, returning true if successful.

Removing Elements:
- remove() or removeFirst(): Removes and returns the head of the queue.
- poll() or pollFirst(): Retrieves and removes the head of the queue, or returns null if the queue is empty.

Accessing Elements:
- element(): Retrieves the head of the queue without removing it.
- peek() or peekFirst(): Retrieves the head of the queue without removing it, or returns null if the queue is empty.

Other Methods:
- size(): Returns the number of elements in the queue.
- isEmpty(): Checks if the queue is empty.
- clear(): Removes all elements.