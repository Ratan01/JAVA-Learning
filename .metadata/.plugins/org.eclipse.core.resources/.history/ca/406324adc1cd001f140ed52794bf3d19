PriorityQueue (priority-based retrieval):
-----------------------------------------
- A PriorityQueue in Java is a part of the java.util package and implements the Queue interface. 
- It is a special type of queue where elements are ordered based on their natural ordering (if they implement 
  Comparable) or a custom Comparator. 
- Unlike a regular queue, the PriorityQueue does not guarantee FIFO (First-In-First-Out) order but ensures that 
  the element with the highest priority is at the head of the queue.
  
Key Features of PriorityQueue:
------------------------------
- Order of Elements: Maintains elements in a priority order, where the natural order or a custom comparator 
  determines the priority.
- Heap Implementation: Internally uses a binary heap for efficient priority handling.
- Duplicates Allowed: Allows duplicate elements.
- Null Not Allowed: Does not permit null elements.
- Performance: Offers O(log n) time complexity for insertion and removal operations.
- Not Synchronized: PriorityQueue is not thread-safe but can be synchronized externally if needed.

Commonly Used Methods:
----------------------
Adding Elements:
- add(E e) or offer(E e): Adds an element to the queue.
 
Removing Elements:
- poll(): Retrieves and removes the head of the queue, or returns null if the queue is empty.
- remove(Object o): Removes a specific element if it exists.

Peeking at Elements:
- peek(): Retrieves the head of the queue without removing it, or returns null if the queue is empty.
- element(): Similar to peek() but throws an exception if the queue is empty.

Size and Emptiness:
- size(): Returns the number of elements in the queue.
- isEmpty(): Checks if the queue is empty.

Iteration:
- Iterating over a PriorityQueue does not guarantee any specific order.
==============================================================================================================
import java.util.PriorityQueue;

public class PriorityQueueExample {
    public static void main(String[] args) {
        // Creating a PriorityQueue of integers
        PriorityQueue<Integer> pq = new PriorityQueue<>();

        // Adding elements
        pq.add(30);
        pq.add(10);
        pq.add(20);

        // Displaying the PriorityQueue
        System.out.println("PriorityQueue: " + pq);

        // Accessing the head of the queue
        System.out.println("Head of queue: " + pq.peek());

        // Removing elements
        System.out.println("Removed element: " + pq.poll());
        System.out.println("PriorityQueue after removal: " + pq);

        // Checking the size
        System.out.println("Size: " + pq.size());
    }
}
===============================================================================================================